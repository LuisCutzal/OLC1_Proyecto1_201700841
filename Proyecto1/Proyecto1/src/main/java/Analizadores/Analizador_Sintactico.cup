
/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;
import com.mycompany.proyecto1.Conjunto;
import com.mycompany.proyecto1.Nodo;
import com.mycompany.proyecto1.Expresiones;
import com.mycompany.proyecto1.Ventana;
import com.mycompany.proyecto1.error;
import com.mycompany.proyecto1.Arbol;

import javax.swing.JOptionPane;
import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code{:
        
        public static Nodo raiz; //raiz del arbol de expresiones
        public static LinkedList<Expresiones> lista_total;
        public static LinkedList<Conjunto> lista_conj;
        public int conthojas=0; //para llevar el control de quienes seran los nodos hoja
        public String resultado="";
        public void syntax_error(Symbol s) //para errores
        {
            
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
            error nuevo = new error("Error Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
            Ventana.listaErrores.add(nuevo);
        }
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
            error nuevo = new error("Error Sintactico", s.value.toString(), s.right+1, s.left+1);
            Ventana.listaErrores.add(nuevo);
        }

        public Nodo getRaiz(){ //metodo para que devuelva el nodo raiz
            return raiz;
        }
:}

//------> Codigo para las acciones gramaticales
action code
{:  :}

/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal String llaveabre,llavecierra,guion,mayor,tilde,puntoycoma,concatenacion,kleene,comilladoble,positivo,interrogacion,disyuncion,dobleporcentaje,comillasimple,conj,numero,cadena,letra,id;


//------> declaracion de no terminales
non terminal LinkedList<Expresiones> INICIO, CUERPO;

non terminal LinkedList<Conjunto> LISTA_CONJ;

non terminal Conjunto CONJ;

non terminal Expresiones EXPRESION;

non terminal Nodo E;



//------> precedencia de menor a mayor

precedence right llaveabre
precedence right concatenacion;
precedence right disyuncion;
precedence right kleene, positivo , interrogacion;


start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
INICIO::= llaveabre:a CUERPO:b llavecierra:c    {: parser.lista_total=b; :}
        | error
        ;

CUERPO::= CUERPO:a LISTA_CONJ:b                 {: RESULT=a; RESULT.add(b); :}
        | CUERPO:a EXPRESION:b                  {: RESULT=a; RESULT.add(b); :}
        | dobleporcentaje:a                     {: parser.resultado=a; System.out.print(a); :}
        | LISTA_ANALISIS:a                      {: RESULT= new LinkedList<>(); RESULT.add(a); :}
        ;

LISTA_CONJ::= LISTA_CONJ:a CONJ:b               {: RESULT=a; RESULT.add(b); :}
        | CONJ:a                                {: RESULT= new LinkedList<>(); RESULT.add(a) :}
        ;

CONJ::= conj:a dospuntos:b  id:c guion:d mayor:e cadena:f tilde:g cadena:h puntoycoma:i {: RESULT= new Conjunto(a.toString(),c.toString(), f.toString(), h.toString()); :}
        | error
        ;

EXPRESION::= cadena:a guion:b mayor:c E:d puntoycoma:e  {: RESULT= new Expresiones(a.toString(), new Arbol(d)): :}
        | error
        ;

E::= concatenacion:a E:b E:c                     {: RESULT= new Nodo(".","",-1,b,c); :}
     |disyuncion:a E:b E:c                       {: RESULT= new Nodo("|","",-1,b,c) :}
     |kleene:a E:b                               {: RESULT= new Nodo("*","",-1,null,b) :}
     |interrogacion:a E:b                        {: RESULT= new Nodo("?","",-1,null,b) :}
     |llaveabre:a id:b llavecierra:c             {: RESULT= new Nodo(b.toString(),"",parser.conthojas,null,null); parser.conthojas++; :}
     |cadena:a                                   {: RESULT= new Nodo(a.toString(),"",parser.conthojas,null,null); parser.conthojas++; :}
     |saltolinea:a                               {: RESULT= new Nodo("\n","",parser.conthojas,null,null); parser.conthojas++; :}
     |comillasimple:a                            {: RESULT= new Nodo("'","",parser.conthojas,null,null); parser.conthojas++; :}
     |comilladoble:a                             {: RESULT= new Nodo(""","",parser.conthojas,null,null); parser.conthojas++; :}
     ;
